// Code generated by go-bindata. DO NOT EDIT.
// sources:
// 1_cards_migration.down.sql (28B)
// 1_cards_migration.up.sql (536B)

package migrations

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __1_cards_migrationDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x48\x4e\x2c\x4a\x29\xb6\xe6\x02\x04\x00\x00\xff\xff\x99\x4b\x9f\x4a\x1c\x00\x00\x00")

func _1_cards_migrationDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_cards_migrationDownSql,
		"1_cards_migration.down.sql",
	)
}

func _1_cards_migrationDownSql() (*asset, error) {
	bytes, err := _1_cards_migrationDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_cards_migration.down.sql", size: 28, mode: os.FileMode(0644), modTime: time.Unix(1760187905, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc4, 0xbd, 0x45, 0xb8, 0xd8, 0xa2, 0x4b, 0xee, 0xe7, 0xf5, 0xa9, 0xae, 0xb6, 0x88, 0x56, 0x13, 0xd8, 0x15, 0xed, 0x67, 0x3c, 0x21, 0x45, 0x20, 0xe2, 0x31, 0x46, 0xb8, 0xbd, 0x8f, 0xcb, 0xb2}}
	return a, nil
}

var __1_cards_migrationUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\x51\x6b\x83\x30\x14\x85\xdf\xfd\x15\xf7\xad\x0a\x7b\x1a\xf4\xa9\x4f\x59\x4d\x69\x98\xc6\xa2\xd7\xd5\x6e\x8c\x10\x4c\xb0\x81\x56\x25\x46\x18\x8c\xfd\xf7\x81\xe9\xdc\x28\x85\x6d\x8f\xf7\x9c\x7b\x0e\xdc\xfb\xad\x73\x4a\x90\x02\x92\x87\x84\x02\xdb\x00\xcf\x10\x68\xc5\x0a\x2c\xa0\x96\x56\x0d\x10\x06\x00\x00\x46\x41\x59\xb2\x18\x76\x39\x4b\x49\x7e\x80\x47\x7a\x80\x98\x6e\x48\x99\x20\x34\xba\x15\x56\xb6\xaa\x3b\x8b\x71\x34\x2a\x8c\xee\xa6\xc8\x38\x68\x2b\x8c\x82\x27\x92\xaf\xb7\x24\x0f\xef\x97\xcb\x68\xaa\xe7\x65\x92\xf8\x95\xfe\xd8\xb9\x4e\x8c\xf6\x04\x48\x2b\xbc\x32\x87\x63\x67\x9d\x50\x7a\xa8\xad\xe9\x9d\xe9\xda\x5b\x4b\xce\xb8\x93\xbe\x65\xfc\x96\x93\xcd\x30\xe9\x2f\xaf\xf3\x1d\x8b\xf7\x8f\x85\x77\xcd\x59\x36\xbe\xd5\xcf\xb5\xd5\xd2\x69\x25\xa4\x03\x64\x29\x2d\x90\xa4\x3b\xd8\x33\xdc\x4e\x23\x3c\x67\x9c\xce\x2d\x3c\xdb\xcf\x1f\xe8\xd5\xff\x62\x41\xb4\x0a\x82\x0b\x11\xc6\x63\x5a\x5d\x11\x31\xea\x4d\x4c\x54\xc4\xd7\x73\x33\xee\x31\x85\x17\x21\x5a\xfd\x2d\xff\xe3\xa2\xb9\xe2\x5b\x8b\x56\xc1\x67\x00\x00\x00\xff\xff\x8a\x8b\x15\x02\x18\x02\x00\x00")

func _1_cards_migrationUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_cards_migrationUpSql,
		"1_cards_migration.up.sql",
	)
}

func _1_cards_migrationUpSql() (*asset, error) {
	bytes, err := _1_cards_migrationUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_cards_migration.up.sql", size: 536, mode: os.FileMode(0644), modTime: time.Unix(1760187898, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf4, 0xca, 0x2e, 0x56, 0xde, 0xbb, 0xf7, 0x82, 0x77, 0xa9, 0xbf, 0x30, 0x96, 0xb3, 0xe2, 0x2f, 0xa7, 0x25, 0xe4, 0x3b, 0xda, 0x6f, 0x93, 0xda, 0x2a, 0x2d, 0xb, 0x3f, 0x43, 0x40, 0x44, 0xd5}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"1_cards_migration.down.sql": _1_cards_migrationDownSql,
	"1_cards_migration.up.sql":   _1_cards_migrationUpSql,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"1_cards_migration.down.sql": {_1_cards_migrationDownSql, map[string]*bintree{}},
	"1_cards_migration.up.sql":   {_1_cards_migrationUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
