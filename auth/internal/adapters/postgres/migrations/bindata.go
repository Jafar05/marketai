// Code generated by go-bindata. DO NOT EDIT.
// sources:
// 1_user_migration.down.sql (27B)
// 1_user_migration.up.sql (316B)

package migrations

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __1_user_migrationDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x28\x2d\x4e\x2d\x2a\xb6\x06\x04\x00\x00\xff\xff\xc8\x3d\x4e\x55\x1b\x00\x00\x00")

func _1_user_migrationDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_user_migrationDownSql,
		"1_user_migration.down.sql",
	)
}

func _1_user_migrationDownSql() (*asset, error) {
	bytes, err := _1_user_migrationDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_user_migration.down.sql", size: 27, mode: os.FileMode(0644), modTime: time.Unix(1752317607, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x29, 0xd, 0x7f, 0xc1, 0x6d, 0x5b, 0xd8, 0x3c, 0xca, 0xe9, 0xdb, 0x8a, 0x4b, 0xb6, 0x88, 0x66, 0xb4, 0x18, 0xe9, 0x85, 0x7e, 0xbb, 0x50, 0x92, 0x99, 0x55, 0x4c, 0xc5, 0x69, 0x4d, 0x37, 0x25}}
	return a, nil
}

var __1_user_migrationUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x8e\x31\x6f\xc2\x30\x10\x46\x77\x7e\xc5\xb7\x91\x48\x1d\xaa\x4a\x99\x3a\xb9\x70\x08\xab\x89\x43\x9d\x73\x81\x2e\x91\x55\x5b\x25\x12\x10\x64\x63\xf5\xef\x57\x0d\xaa\x87\x6e\x8c\xa7\x7b\xef\xee\x2d\x34\x09\x26\xb0\x78\xa9\x09\x72\x05\xd5\x32\x68\x27\x3b\xee\x90\xa2\x0f\x11\xc5\x0c\x00\x06\x07\x63\xe4\x12\x1b\x2d\x1b\xa1\xf7\x78\xa5\x3d\x96\xb4\x12\xa6\x66\x7c\xf9\x73\x1f\xec\xd9\x8d\xa7\x3e\xa5\xc1\x15\xe5\xc3\xa4\xf8\x93\x1d\x8e\x78\x17\x7a\xb1\x16\xba\x78\xaa\xaa\x12\x46\xc9\x37\x43\xd3\x0f\x65\xea\xfa\xc6\x5d\x6c\x8c\xdf\x63\x70\xfd\xc1\xc6\x03\x98\x76\xfc\x0f\x08\xe3\xd1\xe7\x3b\xd5\x63\x99\xd7\xb9\x60\xfe\x9b\x3a\xbf\xd1\x9f\xc1\xdb\xab\x77\xbd\xbd\x82\x65\x43\x1d\x8b\x66\x83\xad\xe4\xf5\x34\xe2\xa3\x55\x94\x3d\xd5\x6e\xff\x6a\xd3\xc5\xdd\xa7\xcd\xca\xe7\x9f\x00\x00\x00\xff\xff\xb3\xad\x26\x13\x3c\x01\x00\x00")

func _1_user_migrationUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_user_migrationUpSql,
		"1_user_migration.up.sql",
	)
}

func _1_user_migrationUpSql() (*asset, error) {
	bytes, err := _1_user_migrationUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_user_migration.up.sql", size: 316, mode: os.FileMode(0644), modTime: time.Unix(1753037986, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6b, 0xf3, 0xd, 0xc1, 0xaa, 0x2e, 0x92, 0xca, 0x27, 0xc9, 0x4e, 0x1e, 0xbb, 0x52, 0x4b, 0x94, 0x54, 0xea, 0xa1, 0x34, 0xac, 0x1a, 0x1e, 0x9d, 0x34, 0x11, 0x37, 0x13, 0x73, 0x8c, 0xac, 0x34}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"1_user_migration.down.sql": _1_user_migrationDownSql,
	"1_user_migration.up.sql":   _1_user_migrationUpSql,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"1_user_migration.down.sql": {_1_user_migrationDownSql, map[string]*bintree{}},
	"1_user_migration.up.sql":   {_1_user_migrationUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
