// Code generated by go-bindata. DO NOT EDIT.
// sources:
// 1_user_migration.down.sql (27B)
// 1_user_migration.up.sql (316B)
// 2_add_phoneNumber.down.sql (53B)
// 2_add_phoneNumber.up.sql (88B)
// 3_add_fullName.down.sql (50B)
// 3_add_fullName.up.sql (84B)
// 4_email_verification_token.down.sql (48B)
// 4_email_verification_token.up.sql (253B)
// 5_add_email_verified.down.sql (55B)
// 5_add_email_verified.up.sql (80B)

package migrations

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __1_user_migrationDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x28\x2d\x4e\x2d\x2a\xb6\x06\x04\x00\x00\xff\xff\xc8\x3d\x4e\x55\x1b\x00\x00\x00")

func _1_user_migrationDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_user_migrationDownSql,
		"1_user_migration.down.sql",
	)
}

func _1_user_migrationDownSql() (*asset, error) {
	bytes, err := _1_user_migrationDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_user_migration.down.sql", size: 27, mode: os.FileMode(0644), modTime: time.Unix(1753518082, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x29, 0xd, 0x7f, 0xc1, 0x6d, 0x5b, 0xd8, 0x3c, 0xca, 0xe9, 0xdb, 0x8a, 0x4b, 0xb6, 0x88, 0x66, 0xb4, 0x18, 0xe9, 0x85, 0x7e, 0xbb, 0x50, 0x92, 0x99, 0x55, 0x4c, 0xc5, 0x69, 0x4d, 0x37, 0x25}}
	return a, nil
}

var __1_user_migrationUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x8e\x31\x6f\xc2\x30\x10\x46\x77\x7e\xc5\xb7\x91\x48\x1d\xaa\x4a\x99\x3a\xb9\x70\x08\xab\x89\x43\x9d\x73\x81\x2e\x91\x55\x5b\x25\x12\x10\x64\x63\xf5\xef\x57\x0d\xaa\x87\x6e\x8c\xa7\x7b\xef\xee\x2d\x34\x09\x26\xb0\x78\xa9\x09\x72\x05\xd5\x32\x68\x27\x3b\xee\x90\xa2\x0f\x11\xc5\x0c\x00\x06\x07\x63\xe4\x12\x1b\x2d\x1b\xa1\xf7\x78\xa5\x3d\x96\xb4\x12\xa6\x66\x7c\xf9\x73\x1f\xec\xd9\x8d\xa7\x3e\xa5\xc1\x15\xe5\xc3\xa4\xf8\x93\x1d\x8e\x78\x17\x7a\xb1\x16\xba\x78\xaa\xaa\x12\x46\xc9\x37\x43\xd3\x0f\x65\xea\xfa\xc6\x5d\x6c\x8c\xdf\x63\x70\xfd\xc1\xc6\x03\x98\x76\xfc\x0f\x08\xe3\xd1\xe7\x3b\xd5\x63\x99\xd7\xb9\x60\xfe\x9b\x3a\xbf\xd1\x9f\xc1\xdb\xab\x77\xbd\xbd\x82\x65\x43\x1d\x8b\x66\x83\xad\xe4\xf5\x34\xe2\xa3\x55\x94\x3d\xd5\x6e\xff\x6a\xd3\xc5\xdd\xa7\xcd\xca\xe7\x9f\x00\x00\x00\xff\xff\xb3\xad\x26\x13\x3c\x01\x00\x00")

func _1_user_migrationUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_user_migrationUpSql,
		"1_user_migration.up.sql",
	)
}

func _1_user_migrationUpSql() (*asset, error) {
	bytes, err := _1_user_migrationUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_user_migration.up.sql", size: 316, mode: os.FileMode(0644), modTime: time.Unix(1759397652, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6b, 0xf3, 0xd, 0xc1, 0xaa, 0x2e, 0x92, 0xca, 0x27, 0xc9, 0x4e, 0x1e, 0xbb, 0x52, 0x4b, 0x94, 0x54, 0xea, 0xa1, 0x34, 0xac, 0x1a, 0x1e, 0x9d, 0x34, 0x11, 0x37, 0x13, 0x73, 0x8c, 0xac, 0x34}}
	return a, nil
}

var __2_add_phonenumberDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\x2d\x4e\x2d\x2a\x56\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x09\xf5\xf5\x53\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x28\xc8\xc8\xcf\x4b\x8d\xcf\x2b\xcd\x4d\x4a\x2d\xb2\x06\x04\x00\x00\xff\xff\xd9\x99\x83\xec\x35\x00\x00\x00")

func _2_add_phonenumberDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__2_add_phonenumberDownSql,
		"2_add_phoneNumber.down.sql",
	)
}

func _2_add_phonenumberDownSql() (*asset, error) {
	bytes, err := _2_add_phonenumberDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "2_add_phoneNumber.down.sql", size: 53, mode: os.FileMode(0644), modTime: time.Unix(1759682067, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8f, 0xeb, 0x1a, 0x9f, 0xb, 0x9, 0xb8, 0x66, 0x1f, 0x9, 0x8f, 0x56, 0xaf, 0xd3, 0x3d, 0xd8, 0xbc, 0xfc, 0xfb, 0xef, 0xad, 0x5f, 0x7a, 0x23, 0x6c, 0x20, 0xbd, 0xae, 0xb0, 0x93, 0x5b, 0x89}}
	return a, nil
}

var __2_add_phonenumberUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\x2d\x4e\x2d\x2a\x56\x70\x74\x71\x51\x70\xf6\xf7\x09\xf5\xf5\x53\xf0\x74\x53\xf0\xf3\x0f\x51\x70\x8d\xf0\x0c\x0e\x09\x56\x28\xc8\xc8\xcf\x4b\x8d\xcf\x2b\xcd\x4d\x4a\x2d\x52\x08\x73\x0c\x72\xf6\x70\x0c\xd2\x30\x35\xd0\x04\xab\xf1\x0b\xf5\xf1\x51\x70\x71\x75\x73\x0c\xf5\x09\x51\x50\x57\xb7\x06\x04\x00\x00\xff\xff\x26\xa6\x39\xe3\x58\x00\x00\x00")

func _2_add_phonenumberUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__2_add_phonenumberUpSql,
		"2_add_phoneNumber.up.sql",
	)
}

func _2_add_phonenumberUpSql() (*asset, error) {
	bytes, err := _2_add_phonenumberUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "2_add_phoneNumber.up.sql", size: 88, mode: os.FileMode(0644), modTime: time.Unix(1759682074, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xfc, 0xbc, 0x92, 0xa7, 0x2e, 0x5, 0x70, 0x1b, 0x7f, 0xbf, 0xc8, 0x28, 0x66, 0x38, 0xfa, 0x5a, 0xa7, 0xac, 0xbf, 0x7a, 0x32, 0xd3, 0x14, 0x3c, 0x1b, 0x6, 0x5b, 0xfe, 0x9b, 0xc4, 0xf5, 0x9b}}
	return a, nil
}

var __3_add_fullnameDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\x2d\x4e\x2d\x2a\x56\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x09\xf5\xf5\x53\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x48\x2b\xcd\xc9\x89\xcf\x4b\xcc\x4d\xb5\x06\x04\x00\x00\xff\xff\x11\xc7\x92\x86\x32\x00\x00\x00")

func _3_add_fullnameDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__3_add_fullnameDownSql,
		"3_add_fullName.down.sql",
	)
}

func _3_add_fullnameDownSql() (*asset, error) {
	bytes, err := _3_add_fullnameDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "3_add_fullName.down.sql", size: 50, mode: os.FileMode(0644), modTime: time.Unix(1759839262, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x51, 0x44, 0x9f, 0x58, 0x1e, 0x96, 0xfe, 0x0, 0x16, 0xf5, 0xde, 0x94, 0x55, 0x1f, 0x6c, 0xcc, 0x3, 0x46, 0xe8, 0x1a, 0x7b, 0x4f, 0x76, 0xe7, 0x92, 0x68, 0x37, 0xe1, 0x6e, 0x9c, 0x2a, 0x91}}
	return a, nil
}

var __3_add_fullnameUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\x2d\x4e\x2d\x2a\x56\x70\x74\x71\x51\x70\xf6\xf7\x09\xf5\xf5\x53\xf0\x74\x53\xf0\xf3\x0f\x51\x70\x8d\xf0\x0c\x0e\x09\x56\x48\x2b\xcd\xc9\x89\xcf\x4b\xcc\x4d\x55\x08\x73\x0c\x72\xf6\x70\x0c\xd2\x30\x35\xd0\x04\x2b\xf0\x0b\xf5\xf1\x51\x70\x71\x75\x73\x0c\xf5\x09\x51\x50\x57\x07\x04\x00\x00\xff\xff\xae\x02\x0c\xbf\x54\x00\x00\x00")

func _3_add_fullnameUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__3_add_fullnameUpSql,
		"3_add_fullName.up.sql",
	)
}

func _3_add_fullnameUpSql() (*asset, error) {
	bytes, err := _3_add_fullnameUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "3_add_fullName.up.sql", size: 84, mode: os.FileMode(0644), modTime: time.Unix(1759839262, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x82, 0xb1, 0x51, 0x30, 0x34, 0x1e, 0x6b, 0x8b, 0x25, 0x56, 0x99, 0xac, 0x18, 0x2d, 0x75, 0x43, 0xe4, 0xe6, 0x55, 0xaf, 0x8d, 0x93, 0x5a, 0xfd, 0xf8, 0x82, 0x4e, 0xc1, 0x7d, 0xb3, 0x5d, 0x9d}}
	return a, nil
}

var __4_email_verification_tokenDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x48\xcd\x4d\xcc\xcc\x89\x2f\x4b\x2d\xca\x4c\xcb\x4c\x4e\x2c\xc9\xcc\xcf\x8b\x2f\xc9\xcf\x4e\xcd\x2b\xb6\xe6\x02\x04\x00\x00\xff\xff\x90\xef\xbd\x5c\x30\x00\x00\x00")

func _4_email_verification_tokenDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__4_email_verification_tokenDownSql,
		"4_email_verification_token.down.sql",
	)
}

func _4_email_verification_tokenDownSql() (*asset, error) {
	bytes, err := _4_email_verification_tokenDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "4_email_verification_token.down.sql", size: 48, mode: os.FileMode(0644), modTime: time.Unix(1759913401, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd, 0x79, 0x26, 0xbc, 0xcb, 0xbf, 0xc1, 0xa8, 0x8f, 0x7e, 0x38, 0xf5, 0x70, 0xcb, 0x7c, 0x21, 0xd8, 0xf2, 0x3b, 0x1, 0xa4, 0x11, 0x4c, 0xce, 0x25, 0x27, 0xb5, 0x57, 0xb7, 0x7, 0x49, 0x39}}
	return a, nil
}

var __4_email_verification_tokenUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8e\x41\x4e\xc3\x30\x10\x45\xf7\x3d\xc5\x5f\x26\x12\x37\x60\x65\xda\x89\x64\x91\x84\xe2\x8c\xa5\x76\x65\x59\xf5\x80\x46\x50\x07\x39\x09\x70\x7c\xa4\x40\x16\x74\x3b\xf3\x9e\xfe\xdb\x3b\x32\x4c\x60\xf3\xd0\x12\x6c\x83\xfe\x89\x41\x27\x3b\xf0\x00\xb9\x46\x7d\x0f\x9f\x52\xf4\x45\x2f\x71\xd6\x31\x87\x79\x7c\x93\x3c\xa1\xda\x01\x80\x26\x78\x6f\x0f\x38\x3a\xdb\x19\x77\xc6\x23\x9d\x71\xa0\xc6\xf8\x96\xf1\x2a\x39\x94\x98\xd3\x78\x0d\xcb\xa2\xa9\xaa\xef\x56\x65\x99\xa4\x84\xcd\x73\xd4\x90\xa3\x7e\x4f\xc3\x7a\x9f\x2a\x4d\x7f\xd8\x3a\x03\xa6\x13\xc3\xf7\xf6\xd9\xd3\x9a\xd5\xfb\xb6\xfd\xfd\xcb\xf7\x87\x16\x99\x42\x9c\xc1\xb6\xa3\x81\x4d\x77\xbc\x41\x2e\x45\xe2\x2c\xe9\x3f\xb2\xd5\xe5\xf1\xab\xaa\x77\xf5\xfd\x4f\x00\x00\x00\xff\xff\xf3\xbb\xc3\x0a\xfd\x00\x00\x00")

func _4_email_verification_tokenUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__4_email_verification_tokenUpSql,
		"4_email_verification_token.up.sql",
	)
}

func _4_email_verification_tokenUpSql() (*asset, error) {
	bytes, err := _4_email_verification_tokenUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "4_email_verification_token.up.sql", size: 253, mode: os.FileMode(0644), modTime: time.Unix(1759913393, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5c, 0x16, 0xeb, 0xa0, 0xe2, 0x80, 0xae, 0xfd, 0x8c, 0x7b, 0x23, 0x2c, 0xf6, 0x50, 0xed, 0xc4, 0x47, 0x9a, 0xfe, 0xeb, 0x83, 0xbb, 0xd2, 0x4a, 0x80, 0x6a, 0x33, 0x62, 0x15, 0x9a, 0xf6, 0x53}}
	return a, nil
}

var __5_add_email_verifiedDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\x2d\x4e\x2d\x2a\x56\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x09\xf5\xf5\x53\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x48\xcd\x4d\xcc\xcc\x89\x2f\x4b\x2d\xca\x4c\xcb\x4c\x4d\xb1\x06\x04\x00\x00\xff\xff\x0c\x1c\x77\x18\x37\x00\x00\x00")

func _5_add_email_verifiedDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__5_add_email_verifiedDownSql,
		"5_add_email_verified.down.sql",
	)
}

func _5_add_email_verifiedDownSql() (*asset, error) {
	bytes, err := _5_add_email_verifiedDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "5_add_email_verified.down.sql", size: 55, mode: os.FileMode(0644), modTime: time.Unix(1759913435, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3f, 0xd6, 0x69, 0xe7, 0xca, 0xfa, 0x9c, 0xff, 0x98, 0xee, 0x2c, 0x41, 0x76, 0x51, 0xd1, 0xe8, 0x3b, 0x7b, 0x8, 0xd3, 0x8, 0x83, 0x93, 0xd4, 0xfb, 0x14, 0xa8, 0x24, 0x95, 0x2, 0xcc, 0xf6}}
	return a, nil
}

var __5_add_email_verifiedUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x51\x0a\x82\x21\x0c\x07\xf0\xab\xfc\xef\xd1\xd3\xcc\x09\xc2\x72\x90\x13\x7a\x0b\xa1\x09\x82\xbd\x28\x75\xfe\xef\x47\x62\xfc\x84\x51\x10\xc6\xef\xf8\x3e\xa0\x18\x71\x57\x69\x8f\x82\x9c\x50\xd4\xc0\xaf\x5c\xad\xc2\xbf\x7d\xae\xf7\xdf\xf7\x1c\xd3\x3f\x08\xaa\xc2\x54\x10\x39\x51\x13\xc3\xe8\xeb\xf8\xed\x0a\x00\x00\xff\xff\x7d\xbf\x37\xde\x50\x00\x00\x00")

func _5_add_email_verifiedUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__5_add_email_verifiedUpSql,
		"5_add_email_verified.up.sql",
	)
}

func _5_add_email_verifiedUpSql() (*asset, error) {
	bytes, err := _5_add_email_verifiedUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "5_add_email_verified.up.sql", size: 80, mode: os.FileMode(0644), modTime: time.Unix(1759913393, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xab, 0x8e, 0x84, 0x84, 0x74, 0x79, 0xa4, 0x7e, 0x4, 0xac, 0x2a, 0xd6, 0x7e, 0xf4, 0x4e, 0xf2, 0xc8, 0x6f, 0xbc, 0xd8, 0x6a, 0x6, 0x3c, 0xa6, 0xc, 0x96, 0x7c, 0xf1, 0x24, 0x21, 0xf8, 0xdf}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"1_user_migration.down.sql":           _1_user_migrationDownSql,
	"1_user_migration.up.sql":             _1_user_migrationUpSql,
	"2_add_phoneNumber.down.sql":          _2_add_phonenumberDownSql,
	"2_add_phoneNumber.up.sql":            _2_add_phonenumberUpSql,
	"3_add_fullName.down.sql":             _3_add_fullnameDownSql,
	"3_add_fullName.up.sql":               _3_add_fullnameUpSql,
	"4_email_verification_token.down.sql": _4_email_verification_tokenDownSql,
	"4_email_verification_token.up.sql":   _4_email_verification_tokenUpSql,
	"5_add_email_verified.down.sql":       _5_add_email_verifiedDownSql,
	"5_add_email_verified.up.sql":         _5_add_email_verifiedUpSql,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"1_user_migration.down.sql":           {_1_user_migrationDownSql, map[string]*bintree{}},
	"1_user_migration.up.sql":             {_1_user_migrationUpSql, map[string]*bintree{}},
	"2_add_phoneNumber.down.sql":          {_2_add_phonenumberDownSql, map[string]*bintree{}},
	"2_add_phoneNumber.up.sql":            {_2_add_phonenumberUpSql, map[string]*bintree{}},
	"3_add_fullName.down.sql":             {_3_add_fullnameDownSql, map[string]*bintree{}},
	"3_add_fullName.up.sql":               {_3_add_fullnameUpSql, map[string]*bintree{}},
	"4_email_verification_token.down.sql": {_4_email_verification_tokenDownSql, map[string]*bintree{}},
	"4_email_verification_token.up.sql":   {_4_email_verification_tokenUpSql, map[string]*bintree{}},
	"5_add_email_verified.down.sql":       {_5_add_email_verifiedDownSql, map[string]*bintree{}},
	"5_add_email_verified.up.sql":         {_5_add_email_verifiedUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
